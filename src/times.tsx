export const times = [
[1,  [2,2],  [34,3]],
[2,  [1,2],  [3,1]],
[3,  [2,1],  [4,2]],
[4,  [3,2],  [5,2]],
[5,  [4,2],  [6,3]],
[6,  [5,3],  [7,1]],
[7,  [6,1],  [8,4], [67,2], [68,2]],
[8,  [7,4],  [9,1], [33,2]],
[9,  [8,1],  [10,2], [86,2]],
[10, [9,2],  [11,1]],
[11, [10,1], [12,3]],
[12, [11,3], [13,1]],
[13, [12,1], [14,3]],
[14, [13,3], [15,2]],
[15, [14,2], [16,2]],
[16, [15,2], [17,3]],
[17, [16,3], [18,2]],
[18, [17,2], [19,2]],
[19, [18,2], [20,2]],
[20, [19,2], [21,2]],
[21, [20,2], [22,2]],
[22, [21,2], [23,1]],
[23, [22,1], [24,2]],
[24, [23,2], [25,2]],
[25, [24,2], [26,2]],
[26, [25,2]],
[27, [28,1]],
[28, [27,1],[29,2]],
[29, [28,2], [30,1]],
[30, [29,1], [31,2]],
[31, [30,2], [32,2]],
[32, [31,2], [33,3], [66,2], [67,1]],
[33, [8,2] , [32,3]],
[34, [1,3] , [35,1]],
[35, [34,1], [36,4], [91,1]],
[36, [35,4], [37,2]],
[37, [36,2], [38,3]],
[38, [37,3], [39,3]],
[39, [38,3], [40,2], [71,3]],
[40, [39,2], [41,1]],
[41, [40,1], [42,1]],
[42, [41,1], [43,2]],
[43, [42,2], [44,2]],
[44, [43,2], [45,2]],
[45, [44,2], [46,1]],
[46, [45,1], [47,2]],
[47, [46,2], [48,2]],
[48, [47,2], [49,2]],
[49, [48,2], [50,2]],
[50, [49,2], [51,2]],
[51, [50,2], [52,1]],
[52, [51,1], [53,3]],
[53, [52,3], [54,2]],
[54, [53,2], [55,2], [100,3]],
[55, [54,2], [56,2]],
[56, [55,2], [57,1]],
[57, [56,1], [58,2]],
[58, [57,2], [59,3]],
[59, [58,3]],
[60, [61,1]],
[61, [60,1],[62,2]],
[62, [61,1], [63,1]],
[63, [62,1], [64,1]],
[64, [63,1], [65,1]],
[65, [64,1], [66,2], [75,1], [76,2]],
[66, [32,2], [65,2]],
[67, [7,2] , [32,1]],
[68, [7,2] , [69,2]],
[69, [68,2], [70,1]],
[70, [69,1], [71,1]],
[71, [39,3], [70,1]],
[72, [73,1]],
[73, [72,1], [74,2]],
[74, [73,2], [75,2]],
[75, [65,1], [74,2]],
[76, [65,2], [77,2]],
[77, [76,2], [78,1]],
[78, [77,1], [79,1]],
[79, [78,1], [80,2]],
[80, [79,2], [81,2]],
[81, [80,2], [82,1]],
[82, [81,1], [83,2]],
[83, [82,2], [84,2]],
[84, [83,2], [85,2]],
[85, [84,2], [90,3]],
[86, [9,2] , [87,2]],
[87, [86,2], [88,1]],
[88, [87,1], [89,1]],
[89, [88,1], [90,2]],
[90, [89,2], [85,3]],
[91, [35,1], [92,2]],
[92, [91,2], [93,2]],
[93, [92,2], [94,1]],
[94, [93,1], [95,1]],
[95, [94,1], [96,3]],
[96, [95,3], [97,2]],
[97, [96,2], [98,2]],
[98, [97,2], [99,3]],
[99, [98,3]],
[100,[54,3], [101,1]],
[101,[100,1]]]

export const cost = (dep: number, ter: number) => {
    let time: number[] = []
    let via: number[][] = []
    let V:number[] = []
    let U:number[] = []
    for (let i = 0; i < 101; i ++){
        if (i+1 !== dep) {time.push(1000)} else {time.push(0)};
        U.push(i+1);
        via.push([dep])
    }
    // alert(time)
    // alert(U)
    while (U.length>0){
        let minTime = 1000;
        let minStation = 0;
        U.forEach((e) => {
            if (time[e-1] < minTime) {
                minTime = time[e-1];
                minStation = e;
            }
        })
        // alert(minStation);
        U = U.filter(e => e !== minStation);
        V.push(minStation);
        if (V.includes(ter)) break;
        let adj = 1;
        while (times.filter(e=>e[0]===minStation)[0][adj] !== undefined){
            const slice : number[] = times.filter(e=>e[0]===minStation)[0][adj] as number[];
            if (time[slice[0]-1] > time[minStation-1]+slice[1]){
                time[slice[0]-1] = time[minStation-1]+slice[1];
                via[slice[0]-1] = via[minStation-1].concat([slice[0]])
            }
            adj ++;
        }
    }
    return ([time[ter-1],via[ter-1]]); 
}

// console.log(lines);
